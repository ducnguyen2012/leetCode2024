#include <vector>
#include <cstdlib>
#include <algorithm>

class Solution {
public:
    int partition(std::vector<int>& nums, int low, int high) {
        int randomPivotIndex = low + std::rand() % (high - low + 1);
        std::swap(nums[randomPivotIndex], nums[high]);
        int pivot = nums[high];
        int j = low - 1;
        for (int i = low; i <= high - 1; ++i) {
            if (nums[i] < pivot) {
                j += 1;
                std::swap(nums[i], nums[j]);
            }
        }
        std::swap(nums[j + 1], nums[high]);
        return j + 1;
    }

    void quickSort(std::vector<int>& nums, int low, int high) {
        while (low < high) {
            if (high - low <= 10) {
                insertionSort(nums, low, high);
                break;
            } else {
                int part = partition(nums, low, high);
                if (part - low < high - part) {
                    quickSort(nums, low, part - 1);
                    low = part + 1;
                } else {
                    quickSort(nums, part + 1, high);
                    high = part - 1;
                }
            }
        }
    }

    void insertionSort(std::vector<int>& nums, int low, int high) {
        for (int i = low + 1; i <= high; ++i) {
            int key = nums[i];
            int j = i - 1;
            while (j >= low && nums[j] > key) {
                nums[j + 1] = nums[j];
                j -= 1;
            }
            nums[j + 1] = key;
        }
    }

    std::vector<int> sortArray(std::vector<int>& nums) {
        std::srand(std::time(nullptr)); // Seed for random number generation
        quickSort(nums, 0, nums.size() - 1);
        return nums;
    }
};
