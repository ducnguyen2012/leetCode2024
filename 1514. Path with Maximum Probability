https://leetcode.com/problems/path-with-maximum-probability/description/?envType=daily-question&envId=2024-08-27
Intuition ‚úíÔ∏è
To solve this problem, we need to find the path between two nodes in an undirected graph that maximizes the product of edge probabilities. The Bellman-Ford algorithm, which is typically used to find the shortest paths in graphs with negative weights, can be adapted to solve this problem. Instead of minimizing distances, we will maximize probabilities by updating the maximum probability to reach each node iteratively.
Approach üöÄ
1Ô∏è‚É£Initialize an array dist where dist[i] holds the maximum probability to reach node i from the start node. Set dist[start] = 1 since the probability of starting at the start node is 1.
2Ô∏è‚É£ Perform up to n-1 iterations, where n is the number of nodes. In each iteration, check each edge and update the probability of reaching the neighboring nodes.
3Ô∏è‚É£ For each edge (u, v), if the probability of reaching v through u (i.e., dist[u] * succProb[i]) is greater than the current known probability to reach v (dist[v]), update dist[v]. Similarly, update dist[u] if the probability of reaching u through v is greater.
4Ô∏è‚É£After completing the iterations, dist[end] will contain the maximum probability of reaching the end node from the start node. If there's no path, it will remain 0.

class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start_node, int end_node) {
        vector<double> maxProb(n, 0.0);
        maxProb[start_node] = 1.0;

        for (int i = 0; i < n-1; ++i) {
            bool updated = false;
            for (int j = 0; j < edges.size(); ++j) {
                int u = edges[j][0];
                int v = edges[j][1];
                double prob = succProb[j];
                if (maxProb[u] * prob > maxProb[v]) {
                    maxProb[v] = maxProb[u] * prob;
                    updated = true;
                }
                if (maxProb[v] * prob > maxProb[u]) {
                    maxProb[u] = maxProb[v] * prob;
                    updated = true;
                }
            }
            if (!updated) break;
        }
        return maxProb[end_node];
    }
};
